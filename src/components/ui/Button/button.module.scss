@use '@styles/mixins' as m;
@use '@styles/variables' as v;

.btn {
  @include m.flex-center;
  position: relative;
  gap: 2rem;
  max-height: 40px;
  cursor: pointer;
  transform: scale(1);
  transform-origin: center;
  will-change: transform;
  backface-visibility: hidden;
  perspective: 1000px;

  &.disabled {
    cursor: not-allowed;
    pointer-events: none;
    opacity: 0.8;
  }

  &.invisible {
    color: transparent !important;
    background-color: red !important;
  }

  &.loading {
    pointer-events: none;
    opacity: 0.95;
  }
  // variants
  &.text {
    background-color: transparent;
    font-size: 4rem;
    font-weight: 500;
    line-height: 150%;
    color: v.$primary-color;
    border: none;
    [data-theme='dark'] & {
      color: v.$primary-color;
    }
    @include m.media-max(v.$breakpoint-md) {
      font-size: 3.7rem !important;
      svg {
        width: 20px !important;
        height: 20px !important;
      }
    }
  }

  &.filled {
    background-color: v.$button-bg;
    color: v.$button-color;
    padding: 2.5rem 4rem;
    font-size: 3.5rem;
    font-weight: 500;
    line-height: 143%;
    color: v.$button-color;
    border: none;
    border-radius: 3rem;
    background-color: v.$button-bg;

    @include m.media-max(v.$breakpoint-md) {
      font-size: 3rem;
      padding: 2rem 3rem;
    }
  }

  &.outlined {
    background-color: transparent;
    color: v.$button-bg;
    padding: 2.5rem 4rem;
    font-size: 3.5rem;
    font-weight: 500;
    line-height: 143%;
    border: 2px solid v.$button-bg;
    border-radius: 3rem;
    transition: all 0.3s ease;

    [data-theme='dark'] & {
      color: v.$button-bg;
      border-color: v.$button-bg;
    }

    &:hover:not(.disabled):not(.loading) {
      background-color: rgba(v.$button-bg, 0.1);

      [data-theme='dark'] & {
        background-color: rgba(v.$button-bg, 0.15);
      }
    }

    @include m.media-max(v.$breakpoint-md) {
      font-size: 3rem;
      padding: 2rem 3rem;
    }
  }

  //colors

  &.primary {
    color: v.$text-button-color !important;
  }

  &.secondary {
    color: v.$text-button-color-secondary !important;
  }

  &.info {
    background-color: v.$info-color !important;
    color: #fff !important;

    &.outlined {
      background-color: transparent !important;
      color: v.$info-color !important;
      border-color: v.$info-color !important;

      &:hover:not(.disabled):not(.loading) {
        background-color: rgba(v.$info-color, 0.1) !important;

        [data-theme='dark'] & {
          background-color: rgba(v.$info-color, 0.15) !important;
        }
      }
    }
  }

  &.danger {
    background-color: v.$danger-color !important;
    color: #fff !important;
    svg {
      color: #fff;
    }

    &.outlined {
      background-color: transparent !important;
      color: v.$danger-color !important;
      border-color: v.$danger-color !important;

      svg {
        color: v.$danger-color;
      }

      &:hover:not(.disabled):not(.loading) {
        background-color: rgba(v.$danger-color, 0.1) !important;

        [data-theme='dark'] & {
          background-color: rgba(v.$danger-color, 0.15) !important;
        }
      }
    }
  }

  // icons

  &.icon {
    width: 50rem;
    height: 50rem;
    @include m.media-max(v.$breakpoint-md) {
      width: 40rem !important;
      height: 40rem !important;
    }
  }

  &.icon-primary-color {
    span {
      color: v.$text-button-color !important;
    }
  }

  &.icon-secondary-color {
    span {
      color: v.$button-color !important;
    }
  }

  &.icon-danger-color {
    span {
      color: v.$danger-color !important;
    }
  }

  &.full-width {
    width: 100% !important;
    flex-grow: 1 !important;
  }
}

$icon-sizes: 12px, 16px, 18px, 20px, 24px, 28px, 32px, 48px;

.icon-text {
  @include m.flex(center, center, 0);
  color: v.$secondary-color;
}

@each $size in $icon-sizes {
  .icon-size-#{$size} {
    svg {
      width: $size !important;
      height: $size !important;
    }
  }
}

.loading-icon {
  width: 5rem !important;
  height: 5rem !important;
}

.hide {
  visibility: hidden;
}

.right {
  flex-direction: row-reverse !important;
}

.loading-wrapper {
  @include m.flex-center;
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: transparent;
  z-index: 1000;

  & span {
    @include m.flex-center();
  }
}
